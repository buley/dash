/* Add */
Network.neuron.add( { 'on_success': function( value ) {
	console.log( 'success', value );
}, 'on_error': function( context ) {
	console.log( 'error', context );
}, 'data': {
	'type': '4doodle1'
	, 'display': '3bar1'
	, 'slug': '2ang2'
} } );

/* Put */
Network.neuron.put( { 'on_success': function( value ) {
	console.log( 'success', value );
}, 'on_error': function( context ) {
	console.log( 'error', context );
}, 'data': {
	'type': 'cruiser'
	, 'display': 'lockedin'
	, 'slug': 'hotwater'
} } );

/* Get Single */
Network.neuron.get( { 'on_success': function( value ) {
	console.log( 'success', value );
}, 'on_error': function( context ) {
	console.log( 'error', context );
}, 'index': 'id', 'key': 1 } );

/* Get Cursor */
Network.neurons.get( { 'on_success': function( value ) {
	console.log( 'success', value );
}, 'on_error': function( context ) {
	console.log( 'error', context );
}, 'on_complete': function() {
	console.log( 'complete' );
}, 'left': 0 } );

/* Get Cursor With Expectations */
Network.neurons.get( { 'on_success': function( value ) {
	console.log( 'success', value );
}, 'on_error': function( context ) {
	console.log( 'error', context );
}, 'on_complete': function() {
	console.log( 'complete' );
}, 'left': 0, 'expecting': { 'id': function( current ) { if( 'number' === typeof current && 0 === current % 2 ) { return current; } else { return false } } } } );

/* Update Single */
// Updates a record at a given id
Network.neuron.update( { 'on_success': function( value ) {
	console.log( 'success', value );
}, 'on_error': function( context ) {
	console.log( 'error', context );
}, 'on_complete': function() {
	console.log( 'complete' );
}, 'key': 40, 'index': 'id', 'data': { 'display': function( previous ) { console.log( 'Update Cursor previous', previous ); if( 'function' == previous ) { previous = previous(); }; var next = ( 'number' === typeof previous ) ? previous + ( Math.random() * 100 ) : 0; return next; } } } );  

/* Update Cursor With Data */
// Add/subtract a random amount when greater or less than 100.
Network.neurons.update( { 'on_success': function( value ) {
	console.log( 'success', value );
}, 'on_error': function( context ) {
	console.log( 'error', context );
}, 'on_complete': function() {
	console.log( 'complete' );
}, 'left': 0, 'data': { 'display': function( previous ) { console.log( 'Update Cursor previous', previous ); if( 'function' == previous ) { previous = previous(); }; var next = ( 'number' === typeof previous ) ? previous + ( Math.random() * 100 ) : 0; return next; } } } );

/* Update Cursor With Data And Expecting */
// Add/subtract a random amount when greater or less than 100. Updates only even-numbered ids.
Network.neurons.update( { 'on_success': function( value ) { 
	console.log( 'success', value );
}, 'on_error': function( context ) {
	console.log( 'error', context );
}, 'on_complete': function() {
	console.log( 'complete' );
}, 'left': 0, 'data': { 'display': function( previous ) { var mark=100; if( 'function' == previous ) { previous = previous(); }; if( previous < mark ) { console.log('Increasing'); next = ( 'number' === typeof previous ) ? previous + ( Math.random() * 100 ) : 0;  return next; } else { console.log('Decreasing'); next = ( 'number' === typeof previous ) ? previous - ( Math.random() * 100 ) : 0; } return next; } }, 'expecting': { 'id': function( current ) { if( 'number' === typeof current && 0 === current % 2 ) { return current; } else { return false } } } } );

/* Delete Single */
// Deletes a record at a given id
Network.neuron.delete( { 'on_success': function( value ) {
	console.log( 'success', value );
}, 'on_error': function( context ) {
	console.log( 'error', context );
}, 'index': 'id', 'key': 1 } );

/* Delete Cursor */
// Deletes all records
Network.neurons.delete( { 'on_success': function( value ) {
	console.log( 'success', value );
}, 'on_error': function( context ) {
	console.log( 'error', context );
}, 'on_complete': function() {
	console.log( 'complete' );
}, 'left': 0 } );   

/* Delete Cursor With Expecting */
// Deletes only odd ids
Network.neurons.delete( { 'on_success': function( value ) {
	console.log( 'success', value );
}, 'on_error': function( context ) {
	console.log( 'error', context );
}, 'on_complete': function() {
	console.log( 'complete' );
}, 'left': 0, 'expecting': { 'id': function( current ) { if( 'number' === typeof current && 1 === current % 2 ) { return current; } else { return false } } } } );    